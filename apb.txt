module apb_protocol(
    input pres,
    input pclk,
    input psel,
    input penable,
    input pwrite,
    input [31:0] paddr,
    input [31:0] pwdata,
    output reg [31:0] prdata,
    output reg pready,
    output reg psil
);

    reg [31:0] mem [0:31]; // Memory declaration, indexing from 0 to 31

  typedef enum {state_1 = 0, state_2 = 1, state_3 = 2, state_4 = 3} state_def;
    reg [1:0] state; // Adjusted state size to accommodate 4 states

    always @(posedge pclk or negedge pres) begin
        if (!pres) begin
            state <= state_1;
            prdata <= 32'b00000000;
            pready <= 0;
            psil <= 0;
            
            // Initialize memory to zero
            for (int i = 0; i < 32; i = i + 1) begin
                mem[i] <= 32'b0;
            end
        end else begin
            case (state)
                state_1:
                    if (pres == 1) begin
                        prdata <= 32'b0;
                        pready <= 0;
                        psil <= 0;
                        if (psel == 0 && penable == 0) begin
                            state <= state_2;
                        end
                    end
                state_2:
                    if (psel == 1 && penable == 0) begin
                        if (paddr > 0 && paddr < 32) begin
                            state <= state_3;
                            pready <= 1;
                        end else begin
                            state <= state_3;
                            pready <= 0;
                        end
                    end else begin
                        state <= state_2;
                    end
                state_3:
                    if (psel && penable) begin
                        if (pwrite) begin
                            if (paddr > 0 && paddr < 32) begin
                                mem[paddr] <= pwdata;
                                state <= state_4;
                                psil <= 0;
                            end else begin
                                state <= state_4;
                                pready <= 1;
                                psil <= 1;
                            end
                        end else begin
                            if (paddr > 0 && paddr < 32) begin
                                prdata <= mem[paddr];
                                state <= state_4;
                                pready <= 1;
                                psil <= 0;
                            end else begin
                                state <= state_4;
                                prdata <= 32'h00000000;
                                pready <= 1;
                                psil <= 1;
                            end
                        end
                    end
                state_4:
                  begin
                    state <= state_1;
                    psil <= 0;
                    pready <= 0;
                  end
            endcase
        end
    end
endmodule
